import discord
from discord.ext import commands, tasks
import random
import asyncio
import json
import os

DATA_FILE = "data/economy_data.json"
START_BALANCE = 100_000

SLOTS = [
    ("üçí", 2),
    ("üçã", 3),
    ("üçá", 4),
    ("üçÄ", 5),
    ("üíé", 10)
]

def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r") as f:
            try:
                return json.load(f)
            except json.JSONDecodeError:
                return {}
    return {}

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=2)

def ensure_user_exists(user_id: int):
    data = load_data()
    str_id = str(user_id)
    if str_id not in data:
        data[str_id] = {"balance": START_BALANCE}
        save_data(data)

def get_balance(user_id: int) -> int:
    ensure_user_exists(user_id)
    data = load_data()
    return data[str(user_id)]["balance"]

def update_balance(user_id: int, amount: int):
    ensure_user_exists(user_id)
    data = load_data()
    data[str(user_id)]["balance"] += amount
    save_data(data)

def bulk_ensure_users(users: list[discord.User]):
    data = load_data()
    changed = False
    for user in users:
        str_id = str(user.id)
        if str_id not in data and not user.bot:
            data[str_id] = {"balance": START_BALANCE}
            changed = True
    if changed:
        save_data(data)


class Economy(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.check_new_members.start()

    def cog_unload(self):
        self.check_new_members.cancel()

    @tasks.loop(hours=1)
    async def check_new_members(self):
        for guild in self.bot.guilds:
            bulk_ensure_users(guild.members)

    @check_new_members.before_loop
    async def before_check_new_members(self):
        await self.bot.wait_until_ready()
        for guild in self.bot.guilds:
            bulk_ensure_users(guild.members)
        print("‚úÖ –≠–∫–æ–Ω–æ–º–∏–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")

    @commands.command(name="–±–∞–ª–∞–Ω—Å")
    async def –±–∞–ª–∞–Ω—Å(self, ctx):
        balance = get_balance(ctx.author.id)
        await ctx.send(f"üí∞ {ctx.author.mention}, —É —Ç–µ–±—è –Ω–∞ —Å—á–µ—Ç—É **{balance}** –º–æ–Ω–µ—Ç.")

    @commands.command(name="–∫—Ä—É—Ç–∏—Ç—å")
    async def –∫—Ä—É—Ç–∏—Ç—å(self, ctx, —Å—Ç–∞–≤–∫–∞: int = None):
        if —Å—Ç–∞–≤–∫–∞ is None:
            await ctx.send("‚ùó –£–∫–∞–∂–∏ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä `!–∫—Ä—É—Ç–∏—Ç—å 500`")
            return
        if —Å—Ç–∞–≤–∫–∞ <= 0:
            await ctx.send("‚ùó –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
            return

        –±–∞–ª–∞–Ω—Å = get_balance(ctx.author.id)
        if —Å—Ç–∞–≤–∫–∞ > –±–∞–ª–∞–Ω—Å:
            await ctx.send("‚ùå –£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.")
            return

        message = await ctx.send("üé∞ –í—Ä–∞—â–∞–µ–º –±–∞—Ä–∞–±–∞–Ω—ã...")

        for _ in range(4):
            —Å–ª—É—á–∞–π–Ω—ã–µ = [random.choice(SLOTS)[0] for _ in range(3)]
            await message.edit(content=" ".join(—Å–ª—É—á–∞–π–Ω—ã–µ))
            await asyncio.sleep(0.1)

        –∏—Ç–æ–≥–æ–≤—ã–µ = [random.choice(SLOTS) for _ in range(3)]
        —Å–∏–º–≤–æ–ª—ã = [item[0] for item in –∏—Ç–æ–≥–æ–≤—ã–µ]
        await message.edit(content=" ".join(—Å–∏–º–≤–æ–ª—ã))

        if —Å–∏–º–≤–æ–ª—ã[0] == —Å–∏–º–≤–æ–ª—ã[1] == —Å–∏–º–≤–æ–ª—ã[2]:
            –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç = –∏—Ç–æ–≥–æ–≤—ã–µ[0][1]
            –≤—ã–∏–≥—Ä—ã—à = —Å—Ç–∞–≤–∫–∞ * –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
            update_balance(ctx.author.id, –≤—ã–∏–≥—Ä—ã—à)
            —Ç–µ–∫—Å—Ç = f"üéâ {ctx.author.mention}, —Ç—ã –≤—ã–∏–≥—Ä–∞–ª **{–≤—ã–∏–≥—Ä—ã—à}** –º–æ–Ω–µ—Ç! (`x{–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç}`)"
        else:
            update_balance(ctx.author.id, -—Å—Ç–∞–≤–∫–∞)
            —Ç–µ–∫—Å—Ç = f"üò¢ {ctx.author.mention}, –Ω–µ –ø–æ–≤–µ–∑–ª–æ. –ü–æ—Ç–µ—Ä—è–Ω–æ **{—Å—Ç–∞–≤–∫–∞}** –º–æ–Ω–µ—Ç."

        await asyncio.sleep(0.4)
        await message.edit(content=f"{' '.join(—Å–∏–º–≤–æ–ª—ã)}\n\n{—Ç–µ–∫—Å—Ç}")

async def setup(bot):
    await bot.add_cog(Economy(bot))
